.contact-div {
  height: 600px;
  //   background: url("../../assets/images/landing.webp");
  background: url("../../assets/images/landing1.jpeg");
  margin-top: -800px;
  background-size: cover;
  background-repeat: no-repeat;
  background-position: center;
  padding-top: 120px;
  h1 {
    font-size: 60px;
    @media screen and (max-width: 820px) {
      font-size: 20px;
    }
  }
}
.contact-form {
  margin-top: 150px;
  input,
  textarea {
    width: 100%;
    padding: 10px 20px;
    margin-top: 20px;
    border: solid 1px #e7e7e7;
    border-radius: 5px;
    font-family: SoraM;
  }
  textarea {
    min-height: 200px;
  }
  a {
    color: #000;
    line-height: 40px;
    text-decoration: none;
    &:hover {
      color: #dc727c;
      text-decoration: underline;
    }
  }
}
.media-icons {
  color: #dc727c;
  margin-right: 20px;
}
.cool {
  font: bold 3rem/1.2 sans-serif;
  max-width: 20rem;

  span {
    color: var(--shadow);
    display: inline-block;
    position: relative;

    // Setting the stagger "by hand". You have to know the number of children beforehand and loop through them all, or set staggers only for a number of first children. Or set it with js
    @for $i from 1 through 10 {
      &:nth-child(#{$i}) {
        &::before,
        &::after {
          animation-delay: #{$i / 10}s;
        }
      }
    }

    // make the font black again if no animation is playing
    @media (prefers-reduced-motion) {
      color: var(--base);
    }

    // the magic, kinda
    &::before {
      animation: max-height 0.4s cubic-bezier(0.61, 1, 0.88, 1) 1 normal both;
      color: var(--accent);
    }

    &::after {
      animation: max-width 0.7s cubic-bezier(0.61, 1, 0.88, 1) 1 normal both;
      color: var(--base);
    }

    &::before,
    &::after {
      // Using data attribute to avoid duplicated content in HTML. It has a very good support when used in the content property https://caniuse.com/mdn-css_types_attr
      content: attr(data-text);
      left: 0;
      // The overflowing text is cut off
      overflow: hidden;
      position: absolute;
      // Set the speak property to none, because we don't want screen readers to read every word in the paragraph twice. "Hello, hello"? No!
      speak: none;

      // In this case we just don't animate things, BUT we can maybe animate opacity only since reduced motion != no motion
      @media (prefers-reduced-motion) {
        animation: none;
        content: "";
      }
    }
  }
}

@keyframes max-width {
  from {
    max-width: 0;
  }
  to {
    max-width: 100%;
  }
}

@keyframes max-height {
  from {
    max-height: 0;
  }
  to {
    max-height: 100%;
  }
}
